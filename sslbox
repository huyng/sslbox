#!/usr/bin/env python

import argparse
import os.path as pth
import os
from flask import Flask, request, render_template, redirect, url_for
from werkzeug import secure_filename

parser = argparse.ArgumentParser()
parser.add_argument("--host", default="0.0.0.0", help="host address for server to listen on")
parser.add_argument("--port", default=9999, help="port for server to listen on")
parser.add_argument("--cert", help="path to certification file")
parser.add_argument("--key", help="path to private key")
parser.add_argument("--upload_folder", default="secure_user_uploads", help="path to upload folder")

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/up", methods=["GET", "POST"])
def upload():
    if request.method == "POST":
        upload_folder = app.config['UPLOAD_FOLDER']
        fh = request.files['file']
        fname = secure_filename(fh.filename)
        fpath = pth.join(upload_folder, fname)
        fh.save(fpath)
        return render_template("upload_done.html", original_filename=fh.filename)
    else:
        return redirect(url_for('index'))

def ensure_dir_exists(dpath, mode=0700):
    if not pth.exists(dpath):
        try:
            os.makedirs(dpath, mode)
            return True
        except OSError:
            pass
    return False


if __name__ == '__main__':
    args = parser.parse_args()
    ssl_context = (args.cert, args.key) if args.cert and args.key else None
    ensure_dir_exists(args.upload_folder)
    app.config['UPLOAD_FOLDER'] = args.upload_folder
    app.run(host=args.host, port=args.port, threaded=True, ssl_context=ssl_context)
